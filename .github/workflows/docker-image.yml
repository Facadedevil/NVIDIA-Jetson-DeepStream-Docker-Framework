name: NVIDIA Jetson Docker CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly to ensure base image compatibility
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}
  BASE_TAG: latest
  DEFAULT_JETPACK: r35.4.1
  
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Run shellcheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './scripts'
        severity: error
        
    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: docker/Dockerfile
        failure-threshold: error
        
  validate:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
      
    - name: Validate docker-compose.yml
      run: docker-compose -f docker-compose.yml config
      
    - name: Check for CUDA in Dockerfile
      run: grep -q "CUDA_ARCH" docker/Dockerfile || (echo "CUDA_ARCH not found in Dockerfile" && exit 1)
    
    - name: Check for Jetson-specific devices in docker-compose.yml
      run: grep -q "nvhost" docker-compose.yml || (echo "Jetson devices not properly specified in docker-compose.yml" && exit 1)
    
    - name: Check for device detection in entrypoint script
      run: grep -q "Jetson" docker/entrypoint.sh || (echo "Jetson device detection not found in entrypoint.sh" && exit 1)
      
  build:
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        jetpack: [r35.3.1, r35.4.1]
        arch: [7.2, 8.7]  # Xavier and Orin architectures
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      if: github.event_name != 'pull_request'
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/nvidia-jetson
        tags: |
          type=raw,value=${{ matrix.jetpack }}-cuda${{ matrix.arch }}
          type=raw,value=latest-cuda${{ matrix.arch }},enable=${{ matrix.jetpack == env.DEFAULT_JETPACK }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          JETPACK_BASE=nvcr.io/nvidia/l4t-jetpack:${{ matrix.jetpack }}
          CUDA_ARCH_BIN=${{ matrix.arch }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/arm64
          
  test-configuration:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Test setup script
      run: |
        chmod +x ./scripts/setup.sh
        ./scripts/setup.sh --skip-build --deepstream-path=/opt/nvidia/deepstream/deepstream-6.2
        grep -q "CUDA_ARCH_BIN" .env || (echo "CUDA_ARCH_BIN not found in .env" && exit 1)
        
    - name: Test run script help
      run: |
        chmod +x ./scripts/run.sh
        ./scripts/run.sh --help | grep -q "monitor" || (echo "Missing monitor option in run.sh" && exit 1)
        
    - name: Test export functionality
      run: |
        mkdir -p ./config
        touch ./config/config.yaml
        chmod +x ./scripts/run.sh
        ./scripts/run.sh export test_export --skip-build
        test -d test_export || (echo "Export directory not created" && exit 1)
        grep -q "Jetson" test_export/README.md || (echo "README doesn't mention Jetson support" && exit 1)
        
  publish-readme:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Update repository description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/nvidia-jetson
        readme-filepath: ./README.md
        short-description: 'Universal Docker framework for NVIDIA Jetson devices with automatic hardware detection'
