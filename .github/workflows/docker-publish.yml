name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '20 18 * * *'  # Runs at 18:20 UTC every day
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # Default JetPack version
  DEFAULT_JETPACK: r35.4.1
  # Explicitly set CI environment variables
  CI: "true"
  GITHUB_ACTIONS: "true"
  JETSON_CI_BUILD: "true"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate Jetson components in docker-compose.yml
        run: |
          if ! grep -q "nvhost" docker-compose.yml; then
            echo "Error: Jetson device mappings not found in docker-compose.yml"
            exit 1
          fi
          
          if ! grep -q "check_gpu" ./docker/entrypoint.sh 2>/dev/null && ! grep -q "check_gpu" ./entrypoint.sh 2>/dev/null; then
            echo "Warning: Jetson GPU detection might be missing in entrypoint script"
            # Don't fail the build, just warn
          fi
      
      - name: Run Hadolint on Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile  # Adjust this path to match your actual Dockerfile location
          failure-threshold: warning

  build:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jetpack: [r35.4.1]  # Can add more versions like r35.3.1 if needed
        cuda_arch: [7.2, 8.7]  # For Xavier and Orin respectively
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'
          
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=${{ matrix.jetpack }}-cuda${{ matrix.cuda_arch }}
            type=raw,value=latest-cuda${{ matrix.cuda_arch }},enable=${{ matrix.jetpack == env.DEFAULT_JETPACK }}
            
      # Locate Dockerfile for the build
      - name: Locate Dockerfile
        id: dockerfile
        run: |
          if [ -f "./docker/Dockerfile" ]; then
            echo "path=./docker/Dockerfile" >> $GITHUB_OUTPUT
          elif [ -f "./Dockerfile" ]; then
            echo "path=./Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "Error: Dockerfile not found"
            exit 1
          fi

      # Create a dummy DeepStream directory for CI
      - name: Create dummy DeepStream directory
        run: |
          sudo mkdir -p /opt/nvidia/deepstream/deepstream-6.2/lib
          sudo mkdir -p /opt/nvidia/deepstream/deepstream-6.2/sources
          echo "6.2.0" | sudo tee /opt/nvidia/deepstream/deepstream-6.2/version
          
      # Set up environment for CI
      - name: Set up CI environment variables
        run: |
          # Create CI environment variables file
          cat > .ci_env << EOF
          CI=true
          GITHUB_ACTIONS=true
          JETSON_CI_BUILD=true
          EOF
            
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ${{ steps.dockerfile.outputs.path }}  # Use the located Dockerfile path
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            JETPACK_BASE=nvcr.io/nvidia/l4t-jetpack:${{ matrix.jetpack }}
            CUDA_ARCH_BIN=${{ matrix.cuda_arch }}
            CI=true
            GITHUB_ACTIONS=true
            JETSON_CI_BUILD=true
          platforms: linux/arm64
          # Pass CI environment variables
          env-file: .ci_env
          
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  test-scripts:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    env:
      CI: "true"
      GITHUB_ACTIONS: "true"
      JETSON_CI_BUILD: "true"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Test setup script
        run: |
          if [ -f "./scripts/setup.sh" ]; then
            chmod +x ./scripts/setup.sh
            CI=true GITHUB_ACTIONS=true JETSON_CI_BUILD=true ./scripts/setup.sh --help | grep "deepstream-path" || echo "Warning: setup.sh might be missing expected options"
          else
            echo "Warning: setup.sh not found in expected location"
          fi
          
      - name: Test run script
        run: |
          if [ -f "./scripts/run.sh" ]; then
            chmod +x ./scripts/run.sh
            CI=true GITHUB_ACTIONS=true JETSON_CI_BUILD=true ./scripts/run.sh --help | grep "monitor" || echo "Warning: run.sh might be missing expected options"
          else
            echo "Warning: run.sh not found in expected location"
          fi
          
      - name: Verify export functionality
        run: |
          if [ -f "./scripts/run.sh" ]; then
            mkdir -p config
            touch config/config.yaml
            chmod +x ./scripts/run.sh
            CI=true GITHUB_ACTIONS=true JETSON_CI_BUILD=true ./scripts/run.sh export test_export --skip-build || echo "Warning: export functionality might not be working"
          fi
          
  update-readme:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Update container repository description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
          short-description: 'Universal Docker framework for NVIDIA Jetson devices with automatic hardware detection'
